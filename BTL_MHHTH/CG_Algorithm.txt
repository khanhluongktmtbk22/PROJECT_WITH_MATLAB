logLength = [30; 70; 100];
lengthlist = [45; 36; 30; 15];
quantity = [7; 5; 8; 9];
%logLength = [70; 100];
%lengthlist = [45; 36; 30; 15];
%quantity = [7; 5; 8; 9];
%logLength = [50; 70; 100];
%lengthlist = [45; 36; 30; 15];
%quantity = [7; 5; 8; 9];
%logLength = [4800; 5400; 6000];
%lengthlist = [980; 1120; 1140; 1460; 1650; 2200; 2316];
%quantity = [969; 1179; 4686; 554; 468; 254; 789];
%logLength = [25; 50; 60; 70; 100];
%lengthlist = [45; 36; 30; 15; 17; 12; 8];
%quantity = [7; 5; 8; 9; 4; 10; 6];
nLengths = length(lengthlist);
patterns = []; % Khởi tạo patterns là một ma trận rỗng
Str_logLength = [];
for j = 1:numel(logLength)
    patterns_t = diag(floor(logLength(j)./lengthlist));
    patterns = [patterns patterns_t];
    vector_col = ones(nLengths, 1) * logLength(j);
    Str_logLength = [Str_logLength; vector_col];
end
%patterns = diag(floor(logLength(1)./lengthlist));
%Str_logLength = ones(nLengths, 1) * logLength(1);
nPatterns = size(patterns,2); %so cot cua patterns
lb2 = zeros(nLengths,1); %ma tran cot
A2 = lengthlist';
lpopts = optimoptions('linprog','Display','off');
ipopts = optimoptions('intlinprog',lpopts);
reducedCost = -Inf;
reducedCostTolerance = -0.00001;
exitflag = 1;
while reducedCost < reducedCostTolerance && exitflag > 0
   % nPatterns = size(patterns,2);
    lb = zeros(nPatterns,1);
    f = Str_logLength;
    A = -patterns;
    b = -quantity;
 
    [values,nLogs,exitflag,~,lambda] = linprog(f,A,b,[],[],lb,[],lpopts); 
    if exitflag > 0 % exitflag = 1 tìm thấy giải pháp tối ưu
        % Now generate a new pattern, if possible
        f2 = -lambda.ineqlin;
        reducedCost_list = [];
        newpattern_list = [];
        for j = 1:numel(logLength)
            b2 = logLength(j);
            [values,reducedCost,pexitflag] = intlinprog(f2,1:nLengths,A2,b2,[],[],lb2,[],ipopts);
            if pexitflag > 0
            reducedCost = b2 + reducedCost; % continue if this reducedCost is negative
            reducedCost_list = [reducedCost_list reducedCost];
            newpattern_list = [newpattern_list values];
            else
                reducedCost = Inf;
                reducedCost_list = [reducedCost_list reducedCost];
                newpattern_list = [newpattern_list values];
            end
                
        end
        reducedCost = min(reducedCost_list);
        index = find(reducedCost_list == reducedCost,1);
        newpattern = round(newpattern_list(:, index));
        if reducedCost < reducedCostTolerance
            patterns = [patterns newpattern];
            nPatterns = nPatterns + 1;
            Str_logLength = [Str_logLength; logLength(index)];
        end
        
    end
end
if exitflag <= 0 
    disp('Error in column generation phase')
else
    [values,logsUsed,exitflag] = intlinprog(f,1:length(lb),A,b,[],[],lb,[],[],ipopts);
    if exitflag > 0
        values = round(values);
        sumt = 0;
        for j = 1:numel(logLength)
            for i = 1:numel(Str_logLength)
                
                if Str_logLength(i)==logLength(j)
                    sumt = sumt + values(i);
                end
            end
            if sumt ~= 0
            fprintf('Optimal solution uses %g logs with length is %g\n', sumt, logLength(j));
            end
            sumt = 0;
        end
        for j = 1:numel(values)
            if values(j) > 0
                fprintf('Cut %g logs %g with pattern\n',values(j), Str_logLength(j));
                for w = 1:size(patterns,1)
                    if patterns(w,j) > 0
                        fprintf('    %d cut(s) of length %d\n', patterns(w,j),lengthlist(w));
                    end
                end
                wastej = Str_logLength(j) - dot(patterns(:,j),lengthlist); % waste due to pattern inefficiency
            fprintf('    Waste of this pattern is %g\n', wastej);
            end
        end
        totalwaste = sum(Str_logLength.*values)-sum(lengthlist.*quantity);
        fprintf('Total waste in this problem is %g.\n', totalwaste);
    else 
        disp('Error in final optimization')
    end
end
table(lengthlist,quantity,patterns*values,'VariableNames',["Length" "Number Required" "Number Produced"])